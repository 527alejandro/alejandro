{
  "changeDetectorTypes": ["Dynamic", "Jit", "Pregen"],
  "testConfig": [
    {"description": "should support literals", "propName": "const", "expression": "10", "expectedResult": "const=10"},
    {"description": "should strip quotes from literals", "propName": "const", "expression": "\\'str\\'", "expectedResult": "const=str"},
    {"description": "should support newlines in literals", "propName": "const", "expression": "\\'a\\n\\nb\\'", "expectedResult": "const=a\\n\\nb"},
    {"description": "should support + operations", "propName": "exp", "expression": "10 + 2", "expectedResult": "exp=12"},
    {"description": "should support - operations", "propName": "exp", "expression": "10 - 2", "expectedResult": "exp=8"},
    {"description": "should support * operations", "propName": "exp", "expression": "10 * 2", "expectedResult": "exp=20"},
    {"description": "should support % operations", "propName": "exp", "expression": "11 % 2", "expectedResult": "exp=1"},
    {"description": "should support == operations", "propName": "exp", "expression": "1 == 1", "expectedResult": "exp=true"},
    {"description": "should support != operations", "propName": "exp", "expression": "1 != 1", "expectedResult": "exp=false"},
    {"description": "should support === operations on identical", "propName": "exp", "expression": "1 === 1", "expectedResult": "exp=true"},
    {"description": "should support !== operations", "propName": "exp", "expression": "1 !== 1", "expectedResult": "exp=false"},
    {"description": "should support === operations on coerceible", "propName": "exp", "expression": "1 === \\"1\\"", "expectedResult": "exp=false"},
    {"description": "should support < operations", "propName": "exp", "expression": "1 < 2", "expectedResult": "exp=true"},
    {"description": "should support < operations", "propName": "exp", "expression": "2 < 1", "expectedResult": "exp=false"},
    {"description": "should support > operations", "propName": "exp", "expression": "2 > 1", "expectedResult": "exp=true"},
    {"description": "should support < operations", "propName": "exp", "expression": "2 < 1", "expectedResult": "exp=false"},
    {"description": "should support <= operations", "propName": "exp", "expression": "1 <= 2", "expectedResult": "exp=true"},
    {"description": "should support <= operations", "propName": "exp", "expression": "2 <= 2", "expectedResult": "exp=true"},
    {"description": "should support <= operations", "propName": "exp", "expression": "2 <= 1", "expectedResult": "exp=false"},
    {"description": "should support >= operations", "propName": "exp", "expression": "2 >= 1", "expectedResult": "exp=true"},
    {"description": "should support >= operations", "propName": "exp", "expression": "2 >= 2", "expectedResult": "exp=true"},
    {"description": "should support >= operations", "propName": "exp", "expression": "1 >= 2", "expectedResult": "exp=false"},
    {"description": "should support && operations", "propName": "exp", "expression": "true && true", "expectedResult": "exp=true"},
    {"description": "should support && operations", "propName": "exp", "expression": "true && false", "expectedResult": "exp=false"},
    {"description": "should support || operations", "propName": "exp", "expression": "true || false", "expectedResult": "exp=true"},
    {"description": "should support || operations", "propName": "exp", "expression": "false || false", "expectedResult": "exp=false"},
    {"description": "should support negate", "propName": "exp", "expression": "!true", "expectedResult": "exp=false"},
    {"description": "should support double negate", "propName": "exp", "expression": "!!true", "expectedResult": "exp=true"},
    {"description": "should support conditionals", "propName": "m", "expression": "1 < 2 ? 1 : 2", "expectedResult": "m=1"},
    {"description": "should support conditionals", "propName": "m", "expression": "1 > 2 ? 1 : 2", "expectedResult": "m=2"},
    {"description": "should support keyed access to a list item", "propName": "array[0]", "expression": "[\\'foo\\', \\'bar\\'][0]", "expectedResult": "array[0]=foo"},
    {"description": "should support keyed access to a map item", "propName": "map[foo]", "expression": "{\\'foo\\': \\'bar\\'}[\\'foo\\']", "expectedResult": "map[foo]=bar"}
  ]
}
