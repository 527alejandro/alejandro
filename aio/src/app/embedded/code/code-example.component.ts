/* tslint:disable component-selector */
import { Component, ElementRef, ViewChild, AfterViewInit, OnDestroy, Input, ChangeDetectionStrategy } from '@angular/core';
import { Logger } from 'app/shared/logger.service';
import { CopyToClipboard } from 'app/shared/copy-to-clipboard';

const originalLabel = 'Copy Code';
const copiedLabel = 'Copied!';

/**
 * Angular.io Code Example
 *
 * Pretty renders a code block, primarily used in the docs and API reference. Can be used within an Angular app, or
 * independently, provided that it is dynamically generated by the component resolver.
 *
 * Usage:
 *   <code-example [language]="..." [escape]="..." [format]="..." [showcase]="..." [animated]="...">
 *     console.log('Hello World')
 *   </code-example>
 *
 * TODO:
 *  - Add animation??
 */
@Component({
  selector: 'code-example',
  template: `
    <button #copyButton (click)="doCopy()">{{ buttonLabel }}</button>
    <pre class="{{classes}}">
      <code class="{{animatedClasses}}" #codeContainer></code>
    </pre>
    `,
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class CodeExampleComponent implements AfterViewInit {

  /**
   * The language of the code to render
   * (could be javascript, dart, typescript, etc)
   */
  @Input()
  language: string;

  /**
   * Whether to display line numbers:
   *  - false: don't display
   *  - true: do display
   *  - number: do display but start at the given number
   */
  @Input()
  linenums: boolean|number = false;

  @ViewChild('codeContainer') codeContainer: ElementRef;
  buttonLabel = originalLabel;
  private copier = new CopyToClipboard();

  constructor(private elementRef: ElementRef, private logger: Logger) {}

  ngAfterViewInit() {
    // The `codeExampleContent` property is set by the DocViewer when it builds this component.
    // It is the original innerHTML of the host element.
    const content = this.elementRef.nativeElement.codeExampleContent;

    // Right now, the prettyPrint library is loaded synchronously at application start up.
    // It is a very small file so there is probably little benefit in lazy loading it
    const formattedCode = window['prettyPrintOne'](content, this.language, this.linenums);

    // **Security:** `codeExampleContent` is provided by docs authors and as such its considered to
    // be safe for innerHTML purposes.
    this.codeContainer.nativeElement.innerHTML = formattedCode;
  }

  doCopy() {
    // We take the innerText because we don't want it to be HTML encoded
    const code = this.codeContainer.nativeElement.innerText;
    if (this.copier.copyText(code)) {
      this.logger.log('Copied code to clipboard:', code);
      // change the button label (for one second)
      this.buttonLabel = copiedLabel;
      setTimeout(() => this.buttonLabel = originalLabel, 1000);
    } else {
      this.logger.error('ERROR copying code to clipboard:', code);
    }
  }
}
