import { ComponentResolver } from 'angular2/core';
import { LocationStrategy, PathLocationStrategy, Location } from 'angular2/platform/common';
import { Router, RouterOutletMap } from './router';
import { RouterUrlSerializer, DefaultRouterUrlSerializer } from './router_url_serializer';
import { ApplicationRef } from 'angular2/core';
import { BaseException } from 'angular2/src/facade/exceptions';
export const ROUTER_PROVIDERS_COMMON = [
    RouterOutletMap,
    /*@ts2dart_Provider*/ { provide: RouterUrlSerializer, useClass: DefaultRouterUrlSerializer },
    /*@ts2dart_Provider*/ { provide: LocationStrategy, useClass: PathLocationStrategy }, Location,
    /*@ts2dart_Provider*/ {
        provide: Router,
        useFactory: routerFactory,
        deps: /*@ts2dart_const*/ [ApplicationRef, ComponentResolver, RouterUrlSerializer, RouterOutletMap, Location],
    },
];
function routerFactory(app, componentResolver, urlSerializer, routerOutletMap, location) {
    if (app.componentTypes.length == 0) {
        throw new BaseException("Bootstrap at least one component before injecting Router.");
    }
    // TODO: vsavkin this should not be null
    let router = new Router(null, app.componentTypes[0], componentResolver, urlSerializer, routerOutletMap, location);
    app.registerDisposeListener(() => router.dispose());
    return router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX3Byb3ZpZGVyc19jb21tb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaWZmaW5nX3BsdWdpbl93cmFwcGVyLW91dHB1dF9wYXRoLWd0TTdRaEVuLnRtcC9hbmd1bGFyMi9zcmMvYWx0X3JvdXRlci9yb3V0ZXJfcHJvdmlkZXJzX2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxFQUFjLGlCQUFpQixFQUFDLE1BQU0sZUFBZTtPQUNyRCxFQUFDLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBQyxNQUFNLDBCQUEwQjtPQUNsRixFQUFDLE1BQU0sRUFBRSxlQUFlLEVBQUMsTUFBTSxVQUFVO09BQ3pDLEVBQUMsbUJBQW1CLEVBQUUsMEJBQTBCLEVBQUMsTUFBTSx5QkFBeUI7T0FDaEYsRUFBQyxjQUFjLEVBQUMsTUFBTSxlQUFlO09BQ3JDLEVBQUMsYUFBYSxFQUFDLE1BQU0sZ0NBQWdDO0FBRTVELE9BQU8sTUFBTSx1QkFBdUIsR0FBNEI7SUFDOUQsZUFBZTtJQUNmLHFCQUFxQixDQUFDLEVBQUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBQztJQUMxRixxQkFBcUIsQ0FBQyxFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUMsRUFBRSxRQUFRO0lBQzNGLHFCQUFxQixDQUFDO1FBQ3BCLE9BQU8sRUFBRSxNQUFNO1FBQ2YsVUFBVSxFQUFFLGFBQWE7UUFDekIsSUFBSSxFQUFFLGtCQUFrQixDQUNwQixDQUFDLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxlQUFlLEVBQUUsUUFBUSxDQUFDO0tBQ3hGO0NBQ0YsQ0FBQztBQUVGLHVCQUF1QixHQUFtQixFQUFFLGlCQUFvQyxFQUN6RCxhQUFrQyxFQUFFLGVBQWdDLEVBQ3BFLFFBQWtCO0lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxJQUFJLGFBQWEsQ0FBQywyREFBMkQsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFDRCx3Q0FBd0M7SUFDeEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxFQUM3RCxlQUFlLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkQsR0FBRyxDQUFDLHVCQUF1QixDQUFDLE1BQU0sTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDcEQsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPcGFxdWVUb2tlbiwgQ29tcG9uZW50UmVzb2x2ZXJ9IGZyb20gJ2FuZ3VsYXIyL2NvcmUnO1xuaW1wb3J0IHtMb2NhdGlvblN0cmF0ZWd5LCBQYXRoTG9jYXRpb25TdHJhdGVneSwgTG9jYXRpb259IGZyb20gJ2FuZ3VsYXIyL3BsYXRmb3JtL2NvbW1vbic7XG5pbXBvcnQge1JvdXRlciwgUm91dGVyT3V0bGV0TWFwfSBmcm9tICcuL3JvdXRlcic7XG5pbXBvcnQge1JvdXRlclVybFNlcmlhbGl6ZXIsIERlZmF1bHRSb3V0ZXJVcmxTZXJpYWxpemVyfSBmcm9tICcuL3JvdXRlcl91cmxfc2VyaWFsaXplcic7XG5pbXBvcnQge0FwcGxpY2F0aW9uUmVmfSBmcm9tICdhbmd1bGFyMi9jb3JlJztcbmltcG9ydCB7QmFzZUV4Y2VwdGlvbn0gZnJvbSAnYW5ndWxhcjIvc3JjL2ZhY2FkZS9leGNlcHRpb25zJztcblxuZXhwb3J0IGNvbnN0IFJPVVRFUl9QUk9WSURFUlNfQ09NTU9OOiBhbnlbXSA9IC8qQHRzMmRhcnRfY29uc3QqL1tcbiAgUm91dGVyT3V0bGV0TWFwLFxuICAvKkB0czJkYXJ0X1Byb3ZpZGVyKi8ge3Byb3ZpZGU6IFJvdXRlclVybFNlcmlhbGl6ZXIsIHVzZUNsYXNzOiBEZWZhdWx0Um91dGVyVXJsU2VyaWFsaXplcn0sXG4gIC8qQHRzMmRhcnRfUHJvdmlkZXIqLyB7cHJvdmlkZTogTG9jYXRpb25TdHJhdGVneSwgdXNlQ2xhc3M6IFBhdGhMb2NhdGlvblN0cmF0ZWd5fSwgTG9jYXRpb24sXG4gIC8qQHRzMmRhcnRfUHJvdmlkZXIqLyB7XG4gICAgcHJvdmlkZTogUm91dGVyLFxuICAgIHVzZUZhY3Rvcnk6IHJvdXRlckZhY3RvcnksXG4gICAgZGVwczogLypAdHMyZGFydF9jb25zdCovXG4gICAgICAgIFtBcHBsaWNhdGlvblJlZiwgQ29tcG9uZW50UmVzb2x2ZXIsIFJvdXRlclVybFNlcmlhbGl6ZXIsIFJvdXRlck91dGxldE1hcCwgTG9jYXRpb25dLFxuICB9LFxuXTtcblxuZnVuY3Rpb24gcm91dGVyRmFjdG9yeShhcHA6IEFwcGxpY2F0aW9uUmVmLCBjb21wb25lbnRSZXNvbHZlcjogQ29tcG9uZW50UmVzb2x2ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgIHVybFNlcmlhbGl6ZXI6IFJvdXRlclVybFNlcmlhbGl6ZXIsIHJvdXRlck91dGxldE1hcDogUm91dGVyT3V0bGV0TWFwLFxuICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogTG9jYXRpb24pOiBSb3V0ZXIge1xuICBpZiAoYXBwLmNvbXBvbmVudFR5cGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgdGhyb3cgbmV3IEJhc2VFeGNlcHRpb24oXCJCb290c3RyYXAgYXQgbGVhc3Qgb25lIGNvbXBvbmVudCBiZWZvcmUgaW5qZWN0aW5nIFJvdXRlci5cIik7XG4gIH1cbiAgLy8gVE9ETzogdnNhdmtpbiB0aGlzIHNob3VsZCBub3QgYmUgbnVsbFxuICBsZXQgcm91dGVyID0gbmV3IFJvdXRlcihudWxsLCBhcHAuY29tcG9uZW50VHlwZXNbMF0sIGNvbXBvbmVudFJlc29sdmVyLCB1cmxTZXJpYWxpemVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJPdXRsZXRNYXAsIGxvY2F0aW9uKTtcbiAgYXBwLnJlZ2lzdGVyRGlzcG9zZUxpc3RlbmVyKCgpID0+IHJvdXRlci5kaXNwb3NlKCkpO1xuICByZXR1cm4gcm91dGVyO1xufSJdfQ==